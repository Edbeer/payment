// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Edbeer/payment-grpc/proto (interfaces: PaymentServiceServer)

// Package mock_proto is a generated GoMock package.
package mock_proto

import (
	context "context"
	reflect "reflect"

	paymentpb "github.com/Edbeer/payment-grpc/proto"
	gomock "github.com/golang/mock/gomock"
)

// MockPaymentServiceServer is a mock of PaymentServiceServer interface.
type MockPaymentServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentServiceServerMockRecorder
}

// MockPaymentServiceServerMockRecorder is the mock recorder for MockPaymentServiceServer.
type MockPaymentServiceServerMockRecorder struct {
	mock *MockPaymentServiceServer
}

// NewMockPaymentServiceServer creates a new mock instance.
func NewMockPaymentServiceServer(ctrl *gomock.Controller) *MockPaymentServiceServer {
	mock := &MockPaymentServiceServer{ctrl: ctrl}
	mock.recorder = &MockPaymentServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPaymentServiceServer) EXPECT() *MockPaymentServiceServerMockRecorder {
	return m.recorder
}

// CancelPayment mocks base method.
func (m *MockPaymentServiceServer) CancelPayment(arg0 context.Context, arg1 *paymentpb.PaidRequest) (*paymentpb.Statement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelPayment", arg0, arg1)
	ret0, _ := ret[0].(*paymentpb.Statement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelPayment indicates an expected call of CancelPayment.
func (mr *MockPaymentServiceServerMockRecorder) CancelPayment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelPayment", reflect.TypeOf((*MockPaymentServiceServer)(nil).CancelPayment), arg0, arg1)
}

// CapturePayment mocks base method.
func (m *MockPaymentServiceServer) CapturePayment(arg0 context.Context, arg1 *paymentpb.PaidRequest) (*paymentpb.Statement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CapturePayment", arg0, arg1)
	ret0, _ := ret[0].(*paymentpb.Statement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CapturePayment indicates an expected call of CapturePayment.
func (mr *MockPaymentServiceServerMockRecorder) CapturePayment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CapturePayment", reflect.TypeOf((*MockPaymentServiceServer)(nil).CapturePayment), arg0, arg1)
}

// CreatePayment mocks base method.
func (m *MockPaymentServiceServer) CreatePayment(arg0 context.Context, arg1 *paymentpb.CreateRequest) (*paymentpb.Statement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePayment", arg0, arg1)
	ret0, _ := ret[0].(*paymentpb.Statement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePayment indicates an expected call of CreatePayment.
func (mr *MockPaymentServiceServerMockRecorder) CreatePayment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePayment", reflect.TypeOf((*MockPaymentServiceServer)(nil).CreatePayment), arg0, arg1)
}

// RefundPayment mocks base method.
func (m *MockPaymentServiceServer) RefundPayment(arg0 context.Context, arg1 *paymentpb.PaidRequest) (*paymentpb.Statement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefundPayment", arg0, arg1)
	ret0, _ := ret[0].(*paymentpb.Statement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefundPayment indicates an expected call of RefundPayment.
func (mr *MockPaymentServiceServerMockRecorder) RefundPayment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefundPayment", reflect.TypeOf((*MockPaymentServiceServer)(nil).RefundPayment), arg0, arg1)
}

// mustEmbedUnimplementedPaymentServiceServer mocks base method.
func (m *MockPaymentServiceServer) mustEmbedUnimplementedPaymentServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedPaymentServiceServer")
}

// mustEmbedUnimplementedPaymentServiceServer indicates an expected call of mustEmbedUnimplementedPaymentServiceServer.
func (mr *MockPaymentServiceServerMockRecorder) mustEmbedUnimplementedPaymentServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedPaymentServiceServer", reflect.TypeOf((*MockPaymentServiceServer)(nil).mustEmbedUnimplementedPaymentServiceServer))
}
