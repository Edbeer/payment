// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Edbeer/auth-grpc/proto (interfaces: AuthService_GetAccountClient,AuthService_GetAccountServer)

// Package mock_proto is a generated GoMock package.
package mock_proto

import (
	context "context"
	reflect "reflect"

	authpb "github.com/Edbeer/auth-grpc/proto"
	gomock "github.com/golang/mock/gomock"
	metadata "google.golang.org/grpc/metadata"
)

// MockAuthService_GetAccountClient is a mock of AuthService_GetAccountClient interface.
type MockAuthService_GetAccountClient struct {
	ctrl     *gomock.Controller
	recorder *MockAuthService_GetAccountClientMockRecorder
}

// MockAuthService_GetAccountClientMockRecorder is the mock recorder for MockAuthService_GetAccountClient.
type MockAuthService_GetAccountClientMockRecorder struct {
	mock *MockAuthService_GetAccountClient
}

// NewMockAuthService_GetAccountClient creates a new mock instance.
func NewMockAuthService_GetAccountClient(ctrl *gomock.Controller) *MockAuthService_GetAccountClient {
	mock := &MockAuthService_GetAccountClient{ctrl: ctrl}
	mock.recorder = &MockAuthService_GetAccountClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthService_GetAccountClient) EXPECT() *MockAuthService_GetAccountClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockAuthService_GetAccountClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockAuthService_GetAccountClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockAuthService_GetAccountClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockAuthService_GetAccountClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockAuthService_GetAccountClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockAuthService_GetAccountClient)(nil).Context))
}

// Header mocks base method.
func (m *MockAuthService_GetAccountClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockAuthService_GetAccountClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockAuthService_GetAccountClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockAuthService_GetAccountClient) Recv() (*authpb.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*authpb.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockAuthService_GetAccountClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockAuthService_GetAccountClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m *MockAuthService_GetAccountClient) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockAuthService_GetAccountClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockAuthService_GetAccountClient)(nil).RecvMsg), arg0)
}

// SendMsg mocks base method.
func (m *MockAuthService_GetAccountClient) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockAuthService_GetAccountClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockAuthService_GetAccountClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method.
func (m *MockAuthService_GetAccountClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockAuthService_GetAccountClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockAuthService_GetAccountClient)(nil).Trailer))
}

// MockAuthService_GetAccountServer is a mock of AuthService_GetAccountServer interface.
type MockAuthService_GetAccountServer struct {
	ctrl     *gomock.Controller
	recorder *MockAuthService_GetAccountServerMockRecorder
}

// MockAuthService_GetAccountServerMockRecorder is the mock recorder for MockAuthService_GetAccountServer.
type MockAuthService_GetAccountServerMockRecorder struct {
	mock *MockAuthService_GetAccountServer
}

// NewMockAuthService_GetAccountServer creates a new mock instance.
func NewMockAuthService_GetAccountServer(ctrl *gomock.Controller) *MockAuthService_GetAccountServer {
	mock := &MockAuthService_GetAccountServer{ctrl: ctrl}
	mock.recorder = &MockAuthService_GetAccountServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthService_GetAccountServer) EXPECT() *MockAuthService_GetAccountServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockAuthService_GetAccountServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockAuthService_GetAccountServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockAuthService_GetAccountServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m *MockAuthService_GetAccountServer) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockAuthService_GetAccountServerMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockAuthService_GetAccountServer)(nil).RecvMsg), arg0)
}

// Send mocks base method.
func (m *MockAuthService_GetAccountServer) Send(arg0 *authpb.Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockAuthService_GetAccountServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockAuthService_GetAccountServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockAuthService_GetAccountServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockAuthService_GetAccountServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockAuthService_GetAccountServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m *MockAuthService_GetAccountServer) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockAuthService_GetAccountServerMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockAuthService_GetAccountServer)(nil).SendMsg), arg0)
}

// SetHeader mocks base method.
func (m *MockAuthService_GetAccountServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockAuthService_GetAccountServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockAuthService_GetAccountServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockAuthService_GetAccountServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockAuthService_GetAccountServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockAuthService_GetAccountServer)(nil).SetTrailer), arg0)
}
