// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Edbeer/auth/proto (interfaces: AuthService_CreateStatementClient,AuthService_CreateStatementServer)

// Package mock_proto is a generated GoMock package.
package mock_proto

import (
	context "context"
	reflect "reflect"

	authpb "github.com/Edbeer/auth/proto"
	gomock "github.com/golang/mock/gomock"
	metadata "google.golang.org/grpc/metadata"
)

// MockAuthService_CreateStatementClient is a mock of AuthService_CreateStatementClient interface.
type MockAuthService_CreateStatementClient struct {
	ctrl     *gomock.Controller
	recorder *MockAuthService_CreateStatementClientMockRecorder
}

// MockAuthService_CreateStatementClientMockRecorder is the mock recorder for MockAuthService_CreateStatementClient.
type MockAuthService_CreateStatementClientMockRecorder struct {
	mock *MockAuthService_CreateStatementClient
}

// NewMockAuthService_CreateStatementClient creates a new mock instance.
func NewMockAuthService_CreateStatementClient(ctrl *gomock.Controller) *MockAuthService_CreateStatementClient {
	mock := &MockAuthService_CreateStatementClient{ctrl: ctrl}
	mock.recorder = &MockAuthService_CreateStatementClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthService_CreateStatementClient) EXPECT() *MockAuthService_CreateStatementClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockAuthService_CreateStatementClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockAuthService_CreateStatementClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockAuthService_CreateStatementClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockAuthService_CreateStatementClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockAuthService_CreateStatementClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockAuthService_CreateStatementClient)(nil).Context))
}

// Header mocks base method.
func (m *MockAuthService_CreateStatementClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockAuthService_CreateStatementClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockAuthService_CreateStatementClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockAuthService_CreateStatementClient) Recv() (*authpb.StatementResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*authpb.StatementResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockAuthService_CreateStatementClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockAuthService_CreateStatementClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m *MockAuthService_CreateStatementClient) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockAuthService_CreateStatementClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockAuthService_CreateStatementClient)(nil).RecvMsg), arg0)
}

// Send mocks base method.
func (m *MockAuthService_CreateStatementClient) Send(arg0 *authpb.StatementRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockAuthService_CreateStatementClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockAuthService_CreateStatementClient)(nil).Send), arg0)
}

// SendMsg mocks base method.
func (m *MockAuthService_CreateStatementClient) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockAuthService_CreateStatementClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockAuthService_CreateStatementClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method.
func (m *MockAuthService_CreateStatementClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockAuthService_CreateStatementClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockAuthService_CreateStatementClient)(nil).Trailer))
}

// MockAuthService_CreateStatementServer is a mock of AuthService_CreateStatementServer interface.
type MockAuthService_CreateStatementServer struct {
	ctrl     *gomock.Controller
	recorder *MockAuthService_CreateStatementServerMockRecorder
}

// MockAuthService_CreateStatementServerMockRecorder is the mock recorder for MockAuthService_CreateStatementServer.
type MockAuthService_CreateStatementServerMockRecorder struct {
	mock *MockAuthService_CreateStatementServer
}

// NewMockAuthService_CreateStatementServer creates a new mock instance.
func NewMockAuthService_CreateStatementServer(ctrl *gomock.Controller) *MockAuthService_CreateStatementServer {
	mock := &MockAuthService_CreateStatementServer{ctrl: ctrl}
	mock.recorder = &MockAuthService_CreateStatementServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthService_CreateStatementServer) EXPECT() *MockAuthService_CreateStatementServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockAuthService_CreateStatementServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockAuthService_CreateStatementServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockAuthService_CreateStatementServer)(nil).Context))
}

// Recv mocks base method.
func (m *MockAuthService_CreateStatementServer) Recv() (*authpb.StatementRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*authpb.StatementRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockAuthService_CreateStatementServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockAuthService_CreateStatementServer)(nil).Recv))
}

// RecvMsg mocks base method.
func (m *MockAuthService_CreateStatementServer) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockAuthService_CreateStatementServerMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockAuthService_CreateStatementServer)(nil).RecvMsg), arg0)
}

// Send mocks base method.
func (m *MockAuthService_CreateStatementServer) Send(arg0 *authpb.StatementResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockAuthService_CreateStatementServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockAuthService_CreateStatementServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockAuthService_CreateStatementServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockAuthService_CreateStatementServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockAuthService_CreateStatementServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m *MockAuthService_CreateStatementServer) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockAuthService_CreateStatementServerMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockAuthService_CreateStatementServer)(nil).SendMsg), arg0)
}

// SetHeader mocks base method.
func (m *MockAuthService_CreateStatementServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockAuthService_CreateStatementServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockAuthService_CreateStatementServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockAuthService_CreateStatementServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockAuthService_CreateStatementServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockAuthService_CreateStatementServer)(nil).SetTrailer), arg0)
}
